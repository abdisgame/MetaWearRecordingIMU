using MbientLab.MetaWear.Peripheral.IBeacon;

using System;
using System.Threading.Tasks;

namespace MbientLab.MetaWear.Peripheral {
    namespace IBeacon {
        /// <summary>
        /// Wrapper class encapsulating the IBeacon configuration
        /// </summary>
        public class Configuration {
            /// <summary>
            /// Advertising UUID
            /// </summary>
            public Guid Uuid { get; }
            /// <summary>
            /// Advertising major value
            /// </summary>
            public ushort Major { get; }
            /// <summary>
            /// Advertising minor value
            /// </summary>
            public ushort Minor { get; }
            /// <summary>
            /// Advertising period
            /// </summary>
            public ushort Period { get; }
            /// <summary>
            /// Advertising receiving power
            /// </summary>
            public sbyte RxPower { get; }
            /// <summary>
            /// Advertising transmitting power
            /// </summary>
            public sbyte TxPower { get; }

            public Configuration(Guid uuid, ushort major, ushort minor, ushort period, sbyte rxPower, sbyte txPower) {
                Uuid = uuid;
                Major = major;
                Minor = minor;
                Period = period;
                RxPower = rxPower;
                TxPower = txPower;
            }

            public override bool Equals(Object obj) {
                if (this == obj) return true;
                if (obj == null || GetType() != obj.GetType()) return false;

                var that = obj as Configuration;

                return Uuid.Equals(that.Uuid) && Major == that.Major && Minor == that.Minor && Period == that.Period && RxPower == that.RxPower && TxPower == that.TxPower;
            }

            public override int GetHashCode() {
                // Generated by IntelliJ
                int result = Uuid.GetHashCode();
                result = 31 * result + Major;
                result = 31 * result + Minor;
                result = 31 * result + Period;
                result = 31 * result + RxPower;
                result = 31 * result + TxPower;
                return result;
            }

            public override string ToString() {
                return string.Format("{{uuid: {0}, major: {1}, minor: {2}, rx: {3}, tx: {4}, period: {5}{6}", Uuid, Major, Minor, Period, RxPower, TxPower, "}");
            }
        }
    }
    /// <summary>
    /// Apple developed protocol for Bluetooth LE proximity sensing
    /// </summary>
    public interface IIBeacon : IModule {
        /// <summary>
        /// Enable IBeacon advertising.  You will need to disconnect from the board to advertise as an IBeacon
        /// </summary>
        void Enable();
        /// <summary>
        /// Disable IBeacon advertising
        /// </summary>
        void Disable();

        /// <summary>
        /// Configure IBeacon advertising settings.  Parameters that are not set will be ignored.
        /// </summary>
        /// <param name="uuid">IBeacon UUID</param>
        /// <param name="major">IBeacon major value, takes precedence over the <code>majorToken</code> parameter</param>
        /// <param name="majorToken">Data token representing the sensor data to use as the new major value</param>
        /// <param name="minor">IBeacon minor value, takes precedence over the <code>minorToken</code> parameter</param>
        /// <param name="minorToken">Data token representing the sensor data to use as the new minor value</param>
        /// <param name="txPower">IBeacon transmitting power</param>
        /// <param name="rxPower">IBeacon receiving power</param>
        /// <param name="period">IBeacon advertising period, in milliseconds (ms)</param>
        void Configure(Guid? uuid = null, 
            ushort? major = null, ushort? minor = null, 
            IDataToken majorToken = null, IDataToken minorToken = null,
            sbyte? txPower = null, sbyte? rxPower = null, 
            ushort? period = null);
        
        /// <summary>
        /// Read the current IBeacon configuration
        /// </summary>
        /// <returns>IBeacon configuration</returns>
        /// <exception cref="TimeoutException">If the read takes too long</exception>
        Task<Configuration> ReadConfigAsync();
    }
}